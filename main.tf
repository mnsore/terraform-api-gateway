 
      
resource "cloudfoundry_app" "oauth_proxy" {
  space            = data.cloudfoundry_space.cf_space.id
  name = "${var.oauth_proxy_appname}-${data.cloudfoundry_space.cf_space.name}"
  docker_image     = "${var.DOCKER_REGISTRY}/${var.OAUTH2_PROXY_DOCKER_IMAGE}" 
  instances        = 1
  memory           = 300
  disk_quota       = 500
    docker_credentials = {
    username = var.DOCKER_USERNAME
    password = var.DOCKER_PASSWORD
  }
  routes {
    port  = 8080
    route =        cloudfoundry_route.oauth_proxy.id
  }
  environment = merge(var.OAUTH2_ENVIRONMENT,tomap(local.oauth_proxy_variables)) 
}

locals {
  oauth_proxy_variables = {
    "OAUTH2_PROXY_PROFILE_URL"                = var.OAUTH2_PROXY_PROFILE_URL
    "OAUTH2_PROXY_OIDC_JWKS_URL"              = var.OAUTH2_PROXY_OIDC_JWKS_URL 
    "OAUTH2_PROXY_LOGIN_URL"                  = var.OAUTH2_PROXY_LOGIN_URL 
    "OAUTH2_PROXY_REDEEM_URL"                 = var.OAUTH2_PROXY_REDEEM_URL
    "OAUTH2_PROXY_OIDC_ISSUER_URL"            = var.OAUTH2_PROXY_OIDC_ISSUER_URL 
    "OAUTH2_PROXY_CLIENT_ID"                  = hsdp_iam_client.oauth_proxy.client_id 
    "OAUTH2_PROXY_CLIENT_SECRET"              = hsdp_iam_client.oauth_proxy.password 
    "OAUTH2_PROXY_COOKIE_NAME"                = var.OAUTH2_PROXY_COOKIE_NAME 
    "OAUTH2_PROXY_COOKIE_REFRESH"             = var.OAUTH2_PROXY_COOKIE_REFRESH 
    "OAUTH2_PROXY_COOKIE_SECRET"              = var.OAUTH2_PROXY_COOKIE_SECRET
    "OAUTH2_PROXY_SET_XAUTHREQUEST"           = var.OAUTH2_PROXY_SET_XAUTHREQUEST
    "OAUTH2_PROXY_PASS_ACCESS_TOKEN"          = var.OAUTH2_PROXY_PASS_ACCESS_TOKEN 
    "OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER"  = var.OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER
    "OAUTH2_PROXY_PASS_BASIC_AUTH"            = var.OAUTH2_PROXY_PASS_BASIC_AUTH 
    "OAUTH2_PROXY_SET_AUTHORIZATION_HEADER"   = var.OAUTH2_PROXY_SET_AUTHORIZATION_HEADER 
    "OAUTH2_PROXY_REDIRECT_URL"               = "https://${var.api_gateway_appname}-${data.cloudfoundry_space.cf_space.name}.${data.cloudfoundry_domain.default.name}/oauth2/callback" 
    "OAUTH2_PROXY_STANDARD_LOGGING"           = "true" 
    "OAUTH2_PROXY_STANDARD_LOGGING_FORMAT"    = "info|CustomLogEvent||OAuth2Proxy|[{{.Timestamp}}] [{{.File}}] {{.Message}}"
    "OAUTH2_PROXY_REQUEST_LOGGING"            = "false"
    "OAUTH2_PROXY_REQUEST_LOGGING_FORMAT"     = "info|CustomLogEvent||OAuth2Proxy|{{.Client}} - [{{.Timestamp}}] {{.Host}} {{.RequestMethod}} {{.Upstream}} {{.RequestURI}} {{.Protocol}} {{.UserAgent}} {{.StatusCode}} {{.ResponseSize}} {{.RequestDuration}}"
    "AUTH2_PROXY_AUTH_LOGGING"                = "false"
    "OAUTH2_PROXY_AUTH_LOGGING_FORMAT"        = "info|CustomLogEvent||OAuth2Proxy|{{.Client}} - [{{.Timestamp}}] [{{.Status}}] {{.Message}}"
  }
}

resource "cloudfoundry_route" "oauth_proxy" {
  domain   = data.cloudfoundry_domain.internal.id
  space    = data.cloudfoundry_space.cf_space.id
  hostname = "${var.oauth_proxy_appname}-${data.cloudfoundry_space.cf_space.name}"
    
}

resource "cloudfoundry_app" "api_gateway" {
  space            = data.cloudfoundry_space.cf_space.id
  name = "${var.api_gateway_appname}-${data.cloudfoundry_space.cf_space.name}"
  docker_image     = "${var.DOCKER_REGISTRY}/${var.API_GATEWAY_DOCKER_IMAGE}"
  instances        = 1
  memory           = 300
  disk_quota       = 500
  health_check_type = "none"
  docker_credentials = {
    username = var.DOCKER_USERNAME
    password = var.DOCKER_PASSWORD
  }
  routes {
    port  = 8080
    route = cloudfoundry_route.api_gateway.id
  }
  environment = merge(tomap(local.api_gateway_variables),var.API_GATEWAY_ENVIRONMENT)
  depends_on = [
    cloudfoundry_app.oauth_proxy 
  ]
}

locals { 
  api_gateway_variables = {
   "ENVOY_CONFIG" = base64encode(file("${path.module}/${var.ENVOY_CONFIG_FILENAME}"))
   "OAUTH_PROXY_ENDPOINT" = "${var.oauth_proxy_appname}-${data.cloudfoundry_space.cf_space.name}.${data.cloudfoundry_domain.internal.name}"
   "OAUTH_PROXY_PORT" = "8080"
   "APPNAME"          = "" 
  }
}

resource "cloudfoundry_route" "api_gateway" {
  domain   = data.cloudfoundry_domain.default.id
  space    = data.cloudfoundry_space.cf_space.id
  hostname = "${var.api_gateway_appname}-${data.cloudfoundry_space.cf_space.name}"
    
}

resource "cloudfoundry_network_policy" "api_gateway" {
  policy {
    source_app      = cloudfoundry_app.api_gateway.id 
    destination_app = cloudfoundry_app.oauth_proxy.id  
    port            = "8080" 
  }
  }



  resource "hsdp_iam_client" "oauth_proxy" {
  name                = "oauth_proxy - ${data.cloudfoundry_space.cf_space.name}"
  description         = "This resource is generated by Terraform. Do not modify manually."
  type                = "Public"
  client_id           = "apigw1-${data.cloudfoundry_space.cf_space.name}"
  password            = random_password.oauth_proxy.result
  application_id      = "d5464649-c837-4b27-aea8-2a73c975d4af" #XX move to data source
  global_reference_id = random_uuid.oauth_proxy.result 

  scopes           = ["mail", "sn", "auth_iam_oidc", "auth_iam_organization","auth_iam_introspect"]
  default_scopes   = ["cn","openid","mail","profile","email"]
  redirection_uris = ["https://${var.api_gateway_appname}-${data.cloudfoundry_space.cf_space.name}.${data.cloudfoundry_domain.default.name}/oauth2/callback"]
  response_types   = ["code"]
}


resource "random_password" "oauth_proxy" {
  length           = 16
  special          = true
  min_upper        = 1
  min_lower        = 1
  min_numeric      = 1
  min_special      = 1
  override_special = "-!@#.:_?{$}"
}

resource "random_uuid" "oauth_proxy" {}